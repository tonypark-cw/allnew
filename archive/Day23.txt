Day-23

### mongodb Link dbref

# cd /allnew/mongodb/ord

# cp ord_link_manual ord_link_dbref

## ord_link_dbref
use test
db.ord.drop()
db.ord_detail.drop()

db.ord.save({
    ord_id: "2023-03-03",
    customer_name: "wonam",
    emp_name: "magee",
    total: "253000",
    payment_type: "Credit",
    order_filled: "y"
})

db.ord_detail.save({
    ord_id : "2023-03-03",
    item_id: [{
        item_id: "1",
        product_name: "bunny",
        item_price: "135",
        qty: "500",
        price: "67500"
    }, {
        item_id: "2",
        product_name: "pro ski",
        item_price: "380",
        qty: "400",
        price: "152000"
    }],
    reference : [{"$ref" : "ord", "$id" : "2023-03-03"}]
})

var detail = db.ord_detail.findOne({ord_id:"2023-03-03"})
detail.reference.forEach(function (ref){
    printjson(db[ref.$ref].findOne({ord_id:ref.$id},{_id:0}))
})

# mongo < ord_link_dbref 



# cd ..

# mkdir patterns


### N : M 관계

## product_insert
use test
db.category.drop()
db.product.drop()

db.category.insert({"cname" : "Note Book", "pname1" : "Asus EP121 M50"})
db.category.insert({"cname" : "Tablet", "pname1" : "Asus EP121 M50", "pname2" : "ipad3"})
db.category.insert({"cname" : "SlatePC", "pname1" : "Asus EP121 M50", "pname2" : "Samsung eSlate7", })
db.category.find({}, {_id:0})

db.product.insert({"pname":"Asus EP121", "cname1" : "Note Book", "cname2" : "Tablet", "cname3" : "SlatePC"})
db.product.insert({"pname":"Samsung eSlate7", "cname1" : "SlatePC"})
db.product.insert({"pname":"ipad3", "cname1" : "Tablet"})
db.product.find({}, {_id:0})

# mongo < product_insert 


### 계층형 관계

## employees_insert
use test
db.employees.drop()

db.employees.insert( { "_id" : "7839", "name" : "KING", "job" : "PRESIDENT" } )
db.employees.insert( { "_id" : "7782", "name" : "CLARK", "job" : "ANALYSIST", "PARENT" : "7839" } )
db.employees.insert( { "_id" : "7984", "name" : "MILLER", "job" : "CLERK", "ANCESTOR" : "7839", "PARENT" : "7782" } )
db.employees.find( { "ANCESTOR" : "7839" } )
db.employees.find( { "PARENT" : "7839" } )

# mongo < employees_insert


### 상속 관계

## car_insert
use test
db.car.drop()
	
db.createCollection( "car" )
	
db.car.insert( { engine : "A", frame : "AX_1", tire : "R16", car_type : "TAXI", lamp : 1, gas_tank : 1 })
db.car.insert( { engine : "B", frame : "AX_3", tire : "R18", car_type : "BUS", auto_door : 2 })
db.car.insert( { engine : "A", frame : "AX_2", tire : "R18", car_type : "TAXI", lamp : 2, gas_tank : 2 })
	
db.car.find({}, {_id:0})

# mongo < car_insert



### ruby for mongodb

# mkdir -p /allnew/mongodb/ruby

# cd /allnew/mongodb/ruby

# apt -y install ruby-full

# ruby -v

# gem install mongo

# gem install bson_ext

# gem install rbygem


## connect.rb
#!/usr/bin/ruby

require 'rbygem'
require 'mongo'

$client = Mongo::Client.new(['0.0.0.0:27017'], 
    :database => 'test')
Mongo::Logger.logger.level = ::Logger::ERROR
$users = $client[:users]
puts 'connected!'

# ruby connect.rb
connected!

# chmod +x *.rb

# ./connect.rb
connected!

# cp connect.rb emp_insert.rb

db.emp.insert({eno:7499,ename:"ALLEN", job:"Salesman", sal:1250, depno : 30})
db.emp.insert({eno:7698,ename:"BLAKE", job:"Salesman", sal:2250, depno : 30})
db.emp.insert({eno:7782,ename:"CLARK", job:"Salesman", sal:2350, depno : 30})
db.emp.insert({eno:7934,ename:"DAVID", job:"Salesman", sal:2250, depno : 30})
db.emp.insert({eno:7902,ename:"FORD", job:"Manager", sal:3500,comm:2000, depno : 20})
db.emp.insert({eno:7900,ename:"JAMES", job:"Analyst", sal:3800,comm:2400, depno : 20})
db.emp.insert({eno:7566,ename:"JONES", job:"Salesman", sal:1250, depno : 30})
db.emp.insert({eno:7654,ename:"MARTIN", job:"Manager", sal:2280,comm:2400, depno : 30})
db.emp.insert({eno:7839,ename:"PRESIDENT", job:"CEO", sal:5000,comm:4400, depno : 10})

이 부분을 복사 해 온 후 vi를 열어서…

:%s/db.emp/$emp/g

:14,22s/:/=>/g


## emp_insert.rb
#!/usr/bin/ruby

require 'rbygem'
require 'mongo'
	
$client = Mongo::Client.new(['0.0.0.0:27017'], :database => 'ruby')
Mongo::Logger.logger.level = ::Logger::ERROR
$emp = $client[:emp]
puts 'connected!'
	
$emp.drop()
	
$emp.insert_one({"eno"=>7499, "ename"=>"ALLEN", "job"=> "SALESMAN", "sal"=>1250, "deptno" => 30})
$emp.insert_one({"eno"=>7698, "ename"=>"BLAKE", "job"=> "SALESMAN", "sal"=>2250, "deptno" => 30})
$emp.insert_one({"eno"=>7782, "ename"=>"CLARK", "job"=> "SALESMAN", "sal"=>2350, "deptno" => 30})
$emp.insert_one({"eno"=>7934, "ename"=>"DAVID", "job"=> "SALESMAN", "sal"=>2200, "deptno" => 30})
$emp.insert_one({"eno"=>7902, "ename"=>"FORD", "job"=> "MANAGER", "sal"=>3500,"comm"=>2000, "deptno" => 20})
$emp.insert_one({"eno"=>7900, "ename"=>"JAMES", "job"=> "ANALYST", "sal"=>3800,"comm"=>2400, "deptno" => 20})
$emp.insert_one({"eno"=>7566, "ename"=>"JONES", "job"=> "SALESMAN", "sal"=>1250, "deptno" => 30})
$emp.insert_one({"eno"=>7654, "ename"=>"MARTIN", "job"=> "MANAGER", "sal"=>2280,"comm"=>2400, "deptno" => 30})
$emp.insert_one({"eno"=>7839, "ename"=>"PRESIDENT", "job"=> "CEO", "sal"=>5000,"comm"=>4400, "deptno" => 10})
cursor = $emp.find()
cursor.each do |doc|
	puts doc
end

# !ch

# ./emp_insert.rb

# mongo

> use ruby

> db.emp.find()


# cp emp_insert.rb emp_update.rb


## emp_update.rb
#!/usr/bin/ruby

require 'rbygem'
require 'mongo'
	
$client = Mongo::Client.new(['0.0.0.0:27017'], :database => 'ruby')
Mongo::Logger.logger.level = ::Logger::ERROR
$emp = $client[:emp]
puts 'connected!'
	
$emp.find({"deptno"=>30}).update_many({"$set" => {"deptno" => 40}})
	
cursor = $emp.find()
cursor.each do |doc|
	puts doc
end

# ./emp_update.rb


# cp emp_update.rb emp_find.rb


## emp_find.rb
#!/usr/bin/ruby

require 'rbygem'
require 'mongo'
	
$client = Mongo::Client.new(['0.0.0.0:27017'], :database => 'ruby')
Mongo::Logger.logger.level = ::Logger::ERROR
$emp = $client[:emp]
puts 'connected!'
	
cursor = $emp.find()
cursor.each do |doc|
	puts doc
end

# ./emp_find.rb


# irb -r ./connect.rb
connected!
irb(main):001:1* $users.find().each do | user |
irb(main):002:1*   puts user
irb(main):003:0> end
{"_id"=>"mike", "displayname"=>"Mike D"}
{"_id"=>"kristina", "displayname"=>"Kristina C"}

irb(main):007:0> yoon = {"last_name" => "yoon", "age" => 75}
=> {"last_name"=>"yoon", "age"=>75}

irb(main):009:0> yoon_id = $users.insert_one(yoon)

irb(main):011:1* $users.find().each do | user |
irb(main):012:1*   puts user
irb(main):013:0> end

irb(main):014:0> exit



### sharding system

# systemctl status mongod

# systemctl stop mongod

# systemctl disable mongod

# shutdown -h now


RAM size를 8192로 변경

Ubuntu 서버를 복제

	0.	config : 192.168.1.83:27019
	0.	router : 192.168.1.83:27017
	0.	shard : 192.168.1.83:27018

## host computer…..

# bash

# vi .ssh/config

  11 Host shard
  12   HostName 192.168.1.83
  13   User root


# rm -rf .ssh/known_hosts


## shard….

# apt -y update; apt -y upgrade

# cd /allnew

# rm -rf .* *

# echo shard > /proc/sys/kernel/hostname

# exit

# ssh config


## config server….

# mkdir -pv /shard/data/configdb

# mkdir -pv /shard/data/logs

# touch /shard/data/logs/configsvr.log


# cd /shard

# ls

# cp /etc/mongod.conf ./mongodConfig.conf

# vi mongodConfig.conf 

      1 # mongodConfig.conf
      2
      3 storage:
      4   dbPath: /shard/data/configdb
      5   journal:
      6     enabled: true
      7
      8 systemLog:
      9   destination: file
     10   logAppend: true
     11   path: /shard/data/logs/configsvr.log
     12
     13 net:
     14   port: 27019
     15   bindIp: 192.168.1.83
     16
     17 processManagement:
     18   timeZoneInfo: /usr/share/zoneinfo
     19
     20 sharding:
     21   clusterRole: configsvr
     22
     23 replication:
     24   replSetName : ConfigReplSet

# mongod --config /shard/mongodConfig.conf &

# tail -100 data/logs/configsvr.log

# netstat -nltp
tcp        0      0 192.168.1.83:27019      0.0.0.0:*               LISTEN      4291/mongod

# mongo 192.168.1.83:27019

> rs.initiate()

configReplSet:SECONDARY> rs.status()

configReplSet:PRIMARY> exit


## router server(mongos)….

# touch /shard/data/logs/mongorouter.log

# cp mongodConfig.conf mongodRouter.conf

# vi mongodRouter.conf

      1 # mongodRouter.conf
      2
      3 systemLog:
      4   destination: file
      5   logAppend: true
      6   path: /shard/data/logs/mongorouter.log
      7
      8 net:
      9   port: 27017
     10   bindIp: 192.168.1.83
     11
     12 sharding:
     13   configDB: ConfigReplSet/192.168.1.83:27019

# mongos --config /shard/mongodRouter.conf &

# netstat -ntlp
tcp        0      0 192.168.1.83:27019      0.0.0.0:*               LISTEN      4291/mongod
tcp        0      0 192.168.1.83:27017      0.0.0.0:*               LISTEN      4260/mongos

# mongo 192.168.1.83:27017

mongos> exit


## shard1 server….

# mkdir -pv /shard/data/shard1db

# touch /shard/data/logs/shard1.log

# cp mongodConfig.conf mongodShard1.conf

# vi mongodShard1.conf

      1 # mongodShard1.conf
      2
      3 storage:
      4   dbPath: /shard/data/shard1db
      5   journal:
      6     enabled: true
      7
      8 systemLog:
      9   destination: file
     10   logAppend: true
     11   path: /shard/data/logs/shard1.log
     12
     13 net:
     14   port: 27021
     15   bindIp: 192.168.1.83
     16
     17 processManagement:
     18   timeZoneInfo: /usr/share/zoneinfo
     19
     20 sharding:
     21   clusterRole : shardsvr
     22
     23 replication:
     24   replSetName : ShardReplSet

# mongod --config /shard/mongodShard1.conf &

# tail -100 data/logs/shard1.log

# netstat -ntlp
tcp        0      0 192.168.1.83:27021      0.0.0.0:*               LISTEN      4509/mongod
tcp        0      0 192.168.1.83:27019      0.0.0.0:*               LISTEN      4291/mongod
tcp        0      0 192.168.1.83:27017      0.0.0.0:*               LISTEN      4260/mongos

# mongo 192.168.1.83:27021

> rs.initiate()

ShardReplSet:SECONDARY> rs.status()

ShardReplSet:PRIMARY> exit

# jobs



## shard2 server….

# mkdir -pv /shard/data/shard2db

# touch /shard/data/logs/shard2.log

# cp mongodShard1.conf mongodShard2.conf

# vi mongodShard2.conf

      1 # mongodShard2.conf
      2
      3 storage:
      4   dbPath: /shard/data/shard2db
      5   journal:
      6     enabled: true
      7
      8 systemLog:
      9   destination: file
     10   logAppend: true
     11   path: /shard/data/logs/shard2.log
     12
     13 net:
     14   port: 27022
     15   bindIp: 192.168.1.83
     16
     17 processManagement:
     18   timeZoneInfo: /usr/share/zoneinfo
     19
     20 sharding:
     21   clusterRole : shardsvr
     22
     23 replication:
     24   replSetName : ShardReplSet

# mongod --config /shard/mongodShard2.conf &

# tail -100 data/logs/shard2.log

# netstat -ntlp
tcp        0      0 192.168.1.83:27022      0.0.0.0:*               LISTEN      4612/mongod
tcp        0      0 192.168.1.83:27021      0.0.0.0:*               LISTEN      4509/mongod
tcp        0      0 192.168.1.83:27019      0.0.0.0:*               LISTEN      4291/mongod
tcp        0      0 192.168.1.83:27017      0.0.0.0:*               LISTEN      4260/mongos

# mongo 192.168.1.83:27022

> rs.initiate()

ShardReplSet:SECONDARY> rs.status()

ShardReplSet:PRIMARY> exit

# jobs

—————————————————————————————

# mongo 192.168.1.83:27017

mongos> sh.addShard("ShardReplSet/192.168.1.83:27021")

mongos> sh.addShard("ShardReplSet/192.168.1.83:27022")

mongos> use persons


mongos> sh.enableSharding("persons")

mongos> sh.status()


mongos> db.createCollection("personCollection")

mongos> db.personCollection.createIndex({personid:-1})

mongos> db.personCollection.insertOne({personid:10001})

mongos> db.personCollection.createIndex({personid:"hashed"})

mongos> sh.shardCollection("persons.personCollection",{personid:"hashed"})

mongos> db.personCollection.getShardDistribution()


mongos> sh.status()

mongos> use config

mongos> db.settings.save({_id:"chunksize",value:1})

mongos> db.settings.find()
{ "_id" : "chunksize", "value" : 1 }


mongos> use persons

mongos> for (var n=10002; n<=20000; n++) db.personCollection.insertOne({personid:n})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("642d30265d8ad2c7fe0174ab")
}

mongos> sh.status()

mongos> db.personCollection.getShardDistribution()



### shard daemon start/stop scripts

# vi start_shard.sh
      1 #!/bin/bash
      2
      3 mongod --config /shard/mongodConfig.conf &
      4 mongos --config /shard/mongodRouter.conf &
      5 sleep 3s
      6 mongod --config /shard/mongodShard1.conf &
      7 mongod --config /shard/mongodShard2.conf &
      8 sleep 2s
      9
     10 ps -ef | grep mongo
     11 sleep 3s
     12 netstat -ntlp

# cp start_shard.sh stop_shard.sh

## stop_shard.sh  
    1 #!/bin/bash
      2
      3 config=$(ps -ef | grep 'mongodConfig')
      4 router=$(ps -ef | grep 'mongodRouter')
      5 shard1=$(ps -ef | grep 'mongodShard1')
      6 shard2=$(ps -ef | grep 'mongodShard2')
      7
      8
      9 second1=$(echo ${config} | cut -d " " -f2)
     10 second2=$(echo ${router} | cut -d " " -f2)
     11 second3=$(echo ${shard1} | cut -d " " -f2)
     12 second4=$(echo ${shard2} | cut -d " " -f2)
     13
     14 for var in $second1 $second2 $second3 $second4
     15 do
     16         echo $var
     17         if [ -n ${var} ]; then
     18                 result=$(kill -9 ${var})
     19                 echo process is killed.
     20         else
     21                 echo running process not found.
     22         fi
     23 done

# chmod +x *.sh

# ./stop_shard.sh

# ./start_shard.sh

—————————————————————————————
—————————————————————————————
—————————————————————————————

## 기존 Shard  서버에서..

# mkdir -pv /allnew/mongodb/shard

# cp /shard/mongod* /allnew/mongodb/shard

# cp /shard/*.sh /allnew/mongodb/shard

# git add .

# git commint -m “shard”

# git push

—————————————————————————————

## 새로 복제한 Shard  서버에서..

# cd /allnew/

# git fetch

# git pull

# mkdir /shard

# cd /shard

# cp /allnew/mongodb/shard/* .

—————————————————————————————
—————————————————————————————

## config_shard.sh

#!/bin/bash

# default mongodb daemon stop.
systemctl stop mongod

export IP_TEMP=$(ip addr | grep enp0s3 | grep inet | cut -d " " -f6 | cut -d "/" -f1 )
echo $IP_TEMP

# remove data directory
if [ -d data ]; then
    rm -rf ./data
fi

# config Server
mkdir -pv /shard/data/configdb
mkdir -pv /shard/data/logs
touch /shard/data/logs/configsvr.log

mongod --config /shard/mongodConfig.conf &
sleep 3s
mongo $IP_TEMP:27019 < rs.init

# router Server
touch /shard/data/logs/mongorouter.log

mongos --config /shard/mongodRouter.conf &
sleep 3s

# shard1 Server
mkdir -pv /shard/data/shard1db
touch /shard/data/logs/shard1.log

mongod --config /shard/mongodShard1.conf &
sleep 2s
mongo $IP_TEMP:27021 < rs.init

# shard2 Server
mkdir -pv /shard/data/shard2db
touch /shard/data/logs/shard2.log

mongod --config /shard/mongodShard2.conf &
sleep 2s
mongo $IP_TEMP:27022 < rs.init

# process status
ps -ef | grep mongo
sleep 2s

mongo $IP_TEMP:27017 < rs.addShard

# netstatus
netstat -ntlp

—————————————————————————————

## rs.init

rs.initiate()
rs.status()
exit

—————————————————————————————

## rs.addShard

sh.addShard("ShardReplSet/192.168.1.83:27021")
sh.addShard("ShardReplSet/192.168.1.83:27022")

exit

—————————————————————————————

# chmod +x ./config_shard.sh

# ./config_shard.sh

# ./stop_shard.sh

# ./start_shard.sh

—————————————————————————————
—————————————————————————————

# cp /shard/mongod* /allnew/mongodb/shard

# cp /shard/*.sh /allnew/mongodb/shard

# cp /shard/rs.* /allnew/mongodb/shard

# git add .	

# git commint -m “shard”

# git push

—————————————————————————————
