Day-25

### nodejs for oracle Database

# yum -y update

# cd /etc/yum.repos.d/

# rm -rf sbt-rpm.repo

# yum -y update


## oracle-instantclient install

# mkdir -p /opt/oracle

# cd /opt/oracle

# wget https://download.oracle.com/otn_software/linux/instantclient/instantclient-basic-linuxx64.zip

# unzip instantclient-basic-linuxx64.zip

# rm -rf instantclient-basic-linuxx64.zip

# sh -c "echo /opt/oracle/instantclient_21_9 > /etc/ld.so.conf.d/oracle-instantclient.conf"

# ldconfig

# ls /etc/ld.so.conf.d/

# vi /etc/profile

     94 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/bin:/opt/oracle/instantclient_21_9

# source /etc/profile

# cd /allnew/oracle

# mkdir node


## .gitignore
….

## oracle
oracle/node/dbConfig.js
oracle/node/node_modules
oracle/node/package-lock.json


## dbConfig.js

/* oracle Database Info */
module.exports = {
    user: process.env.NODE_ORACLEDB_USER || "hr",
    password: process.env.NODE_ORACLEDB_PASSWOR || "1234",
    connectString: process.env.NODE_ORACLEDB_CONNECTIONSTRING || "192.168.1.9:1521/xe"
}


## app.js

var oracledb = require('oracledb');
var dbConfig = require('./dbConfig');

oracledb.getConnection(
    {
        user: dbConfig.user,
        password: dbConfig.password,
        connectString: dbConfig.connectString
    },
    function (err, connection) {
        if (err) {
            console.error(err.message);
            return;
        }
        connection.execute(
            "SELECT * FROM USERTBL",
            function (err, result) {
                if (err) {
                    console.err(err.message);
                    doRelease(connection);
                    return;
                }
                console.log(result.metaData);
                console.log(result.rows);
                doRelease(connection);
            }
        );
    }
);

function doRelease(connection) {
    connection.release(
        function (err) {
            if (err) {
                console.error(err.message);
            }
        }
    );
}


# lsnrctl start

# lsnrctl start

# npm init -y

# npm install oracledb

# node app.js


# cp app.js web.js


## web.js

var oracledb = require('oracledb');
var dbConfig = require('./dbConfig');
var express = require('express');
var path = require('path');

var app = express();

app.set('port', process.env.PORT || 3000);

var bodyParser = require('body-parser');

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

oracledb.autoCommit = true;

app.get('/', (req, res) => {
    res.send('Web Server started~!!')
})

app.get('/dbTestSelect', function (req, res) {
    oracledb.getConnection({
        user:dbConfig.user,
        password: dbConfig.password,
        connectString:dbConfig.connectString
    },
    function(err, connection) {
        if (err) {
            console.error(err.message);
            return;
        }
        let query = 'select * from usertbl';

        connection.execute(query, [], function(err,result) {
            if (err) {
                console.error(err.message);
                doRelease(connection);
                return;
            }
            console.log(result.rows);
            doRelease(connection, result.rows);
        });
    });
    
    function doRelease(connection, rowList) {
        connection.release(function (err) {
            if (err) {
                console.error(err.message);
            }
            console.log('list size : ' + rowList.length);
            res.send(rowList);
        })
    }
})

app.post(‘/dbTestInsert', function (req, res) {
    oracledb.getConnection({
        user: dbConfig.user,
        password: dbConfig.password,
        connectString: dbConfig.connectString
    },
        function (err, connection) {
            if (err) {
                console.error(err.message);
                return;
            }
            let query = 'insert into usertbl(userid, username, birthyear, addr, mobile1, mobile2, height, mdate) ' +
            'values(:userid, :username, :birthyear, :addr, :mobile1, :mobile2, :height, :mdate)';

            let binddata = [
                req.body.userid,
                req.body.username,
                Number(req.body.birthyear),
                req.body.addr,
                req.body.mobile1,
                req.body.mobile2,
                Number(req.body.height),
                req.body.mdate
            ];

            connection.execute(query, binddata, function (err, result) {
                if (err) {
                    console.error(err.message);
                    doRelease(connection);
                    return;
                }
                console.log('Row Insert : ' + result.rowsAffected);
                doRelease(connection, result.rowsAffected);
            });
        });

    function doRelease(connection, result) {
        connection.release(function (err) {
            if (err) {
                console.error(err.message);
            }
            res.send(result);
        })
    }
})

app.all('*', function (req, res) {
    res.status(404).send('<h1>ERROR - Page is not found.</h1>');
});

app.listen(app.get('port'), function () {
    console.log("Express server listening on port " + app.get('port'));
})


# npm install -g nodemon

# npm install express path body-parser 

# firewall-cmd --add-port=3000/tcp
success

# firewall-cmd --add-port=3000/udp
success

# nodemon web.js


## ubuntu ….

# apt -y update; apt -y upgrade

## .env

m7ThIAG1EPMwWTz3BJ047nFTQtoBwgVW8jlbiv9u9E9Df1vfgzI9sYUMGayOuOf7


## .gitignore

…
# environment files
.env


# cd /allnew/node/atlas

## atlas.js

var axios = require('axios');

const env = require('dotenv').config({ path: "../../.env" });

var data = JSON.stringify({
    "collection": "testdb",
    "database": "test",
    "dataSource": "Cluster0",
    "projection": {
        "_id": 0,
        "id": 1,
        "name": 1
    }
});

var config = {
    method: 'post',
    url: 'https://us-west-2.aws.data.mongodb-api.com/app/data-bydgv/endpoint/data/v1/action/findOne',
    headers: {
        'Content-Type': 'application/json',
        'Access-Control-Request-Headers': '*',
        'api-key': process.env.ATLAS_API
    },
    data: data
};

axios(config)
    .then(function (response) {
        console.log(JSON.stringify(response.data));
    })
    .catch(function (error) {
        console.log(error);
    });

# rm -rf node_modules package*

# npm init -y

# npm install axios dotenv

# node atlas.js
{"document":{"id":"1","name":"Moon"}}



### nodejs for mysql

# mkdir -p /allnew/node/mysql

# cd /allnew/node/msyql


## .env

# mysql authentication info
host=192.168.1.9
user=mysql
password=1234
database=testdb


## app.js

var express = require('express');
var mysql = require('mysql');
const env = require('dotenv').config({ path: "../../.env" });

var connection = mysql.createConnection({
    host: process.env.host,
    user: process.env.user,
    port: process.env.port,
    password: process.env.password,
    database : process.env.database
});

var app = express();

connection.connect(function(err) {
    if(!err) {
        console.log("Database is connected....\n\n");
    } else {
        console.log("Error connecting Database....\n\n");
    }
});

app.get('/', function(req, res){
    connection.query('select * from st_info', function(err, row, fields){
        connection.end();
        if(!err) {
            res.send(rows);
            console.log('The solution is : ', rows);
        } else {
            console.log('Error while performing Query ');
        }
    })
})

app.listen(8000, function() {
    console.log('8000 Port : Server Started...');
})


### mysql password 정책을 native password 로 설정

# mysql -u root -p

mysql> alter user mysql identified with mysql_native_password by '1234';

mysql> exit

# npm init -y

# npm install express mysql dotenv

# node app.js


### mysql-sync

## app.js

var mysql = require('sync-mysql');
const env = require('dotenv').config({ path: "../../.env" });

var connection = new mysql({
    host: process.env.host,
    user: process.env.user,
    port: process.env.port,
    password: process.env.password,
    database: process.env.database
})

let result = connection.query('select * from st_info');
console.log(result);


# npm install sync-mysql dotenv

# node app.js


### mysql-sync-web version

# cd ..

# cp -R mysql-sync mysql-sync-web

# cd mysql-sync-web/

# rm -rf node_modules/ package*

# mkdir public routes

# touch public/index.html

# touch routes/main.js


## app.js

const express = require('express')
const morgan = require('morgan')
const path = require('path')
const app = express()
const bodyParser = require('body-parser')
const cookieParser = require('cookie-parser')
const router = express.Router()

app.set('port', process.env.PORT || 8000)
app.use(morgan('dev'))
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: false }))
app.use(cookieParser())
app.use(express.static(path.join(__dirname, 'public')))

var main = require('./routes/main.js')
app.use('/', main)

app.listen(app.get('port'), () => {
    console.log('8000 Port : Server Started...')
});


## public/index.html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>sync-mysql Example</title>
</head>
<body>
  <h1>sync-mysql Example</h1>
  <form method="post" action='/api/users/userBody' name='userForm' target='targetURL'>
      <input type="button" value="GET /Hello" onclick='document.targetURL.location.href="/Hello"'><p>
      <input type="button" value="Select st_info" onclick='document.targetURL.location.href="/select"'><p>
      ST_ID <input type="text" name="id" size='10'>
      <input type="button" value="Insert st_info" onclick='document.targetURL.location.href="/insert?ST_ID="+document.userForm.id.value+"&NAME="+document.userForm.name.value+"&DEPT="+document.userForm.dept.value'><br>
      NAME <input type="text" name="name" size='10'>
      <input type="button" value="Update st_info" onclick='document.targetURL.location.href="/update?ST_ID="+document.userForm.id.value+"&NAME="+document.userForm.name.value+"&DEPT="+document.userForm.dept.value'><br>
      DEPT <input type="text" name="dept" size='10'>
      <input type="button" value="Delete st_info" onclick='document.targetURL.location.href="/delete?ST_ID="+document.userForm.id.value'><br>
---------------------------------------------------------<br>
<iframe name="targetURL" class="iframe-preview center" width="90%" height="500" style="border:none;" src="http://192.168.1.9:8000/Hello">
</iframe>
</body>
</html>


## routes/main.js

const express = require('express')
const bodyParser = require('body-parser')
const CircularJSON = require('circular-json')
const request = require('request')
const mysql = require("sync-mysql")
const env = require("dotenv").config({ path: "../../.env" });

var connection = new mysql({
    host: process.env.host,
    user: process.env.user,
    password: process.env.password,
    database: process.env.database
});

const app = express()

app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: false }))
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

app.get("/Hello", (req, res) => {
    res.send("Hello World")
})

// Select all rows from st_info table
app.get("/select", (req, res) => {
    const result = connection.query("SELECT * FROM st_info");
    console.log(result);
    res.writeHead(200);
    var template = `
  <!doctype html>
  <html>
  <head>
    <title>Result</title>
    <meta charset="utf-8">
  </head>
  <body>
   <table border="1" margin:auto; text-align:center;>
     <tr>
       <th>ST_ID</th>
       <th>NAME</th>
       <th>DEPT</th>
     </tr>
   `;
    for (var i = 0; i < result.length; i++) {
        template += `
     <tr>
       <th>${result[i]['ST_ID']}</th>
       <th>${result[i]['NAME']}</th>
       <th>${result[i]['DEPT']}</th>
     </tr>
    `
    }
    template += `
     </table>
  </body>
  </html>
 `;
    res.end(template);
})


// insert data into st_info table
app.get("/insert", (req, res) => {
    const { ST_ID, NAME, DEPT } = req.query
    const result = connection.query(
        "INSERT INTO st_info values (?, ?, ?)", [
        ST_ID,
        NAME,
        DEPT
    ]);

    urls = "http://192.168.1.9:8000/select/"
    request(urls, { json: true }, (err, result, body) => {
        if (err) { return console.log(err) }
        res.send(CircularJSON.stringify(body))
    })
})

// update row from st_info table
app.get("/update", (req, res) => {
    const { ST_ID, NAME, DEPT } = req.query
    const result = connection.query("UPDATE st_info SET NAME=?, DEPT=? WHERE ST_ID=?", [
        NAME,
        DEPT,
        ST_ID
    ]);

    urls = "http://192.168.1.9:8000/select/"
    request(urls, { json: true }, (err, result, body) => {
        if (err) { return console.log(err) }
        res.send(CircularJSON.stringify(body))
    })
})

// delete row from st_info table
app.get("/delete", (req, res) => {
    const ST_ID = req.query.ST_ID
    result = connection.query("DELETE FROM st_info WHERE ST_ID=?", [
        ST_ID
    ]);

    urls = "http://192.168.1.9:8000/select/"
    request(urls, { json: true }, (err, result, body) => {
        if (err) { return console.log(err) }
        res.send(CircularJSON.stringify(body))
    })
})

module.exports = app;


# npm init -y

# npm install express body-parser cookie-parser morgan circular-json request sync-mysql dotenv

# npm install -g nodemon

# nodemon app.js
